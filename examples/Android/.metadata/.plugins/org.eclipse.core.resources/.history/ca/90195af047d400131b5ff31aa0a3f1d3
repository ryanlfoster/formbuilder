package org.tpweb.formbuilder;

import java.io.IOException;
import java.util.Map.Entry;
import java.util.Properties;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.webkit.WebView;
import android.widget.TextView;

public class FormViewer extends Activity {
	private WebView webview;
	private CouchDB couchdb;
	private CouchDBProxy proxy;
	

	  private static final int PORT = 8080;
	  private TextView hello;
	  private MyHTTPD server;
	  private Handler handler = new Handler();

	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.formviewer);
		webview = (WebView) findViewById(R.id.webview);
		couchdb = new CouchDB("formbuilder", MainActivity.server, MainActivity.serverPort, "http");
		proxy = new CouchDBProxy();

		if (getIntent() != null) { // send intent to show only favorite songs
			Bundle extras = getIntent().getExtras();
			String id = extras.getString("id");
			webview.loadUrl("http://localhost:8080");
			//new LoadData().execute(id, webview);
		} else {
			Intent i = new Intent(getApplicationContext(), MainActivity.class);
			i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
			startActivity(i);
		}

	    try {
	      server = new MyHTTPD();
	      
	    } catch (IOException e) {
	      e.printStackTrace();
	    }
	  }
	 
	  @Override
	  protected void onPause() {
	    super.onPause();
	    if (server != null)
	      server.stop();
	  }

	private class LoadData extends AsyncTask<Object, Void, Object> {
		private WebView webv;

		@Override
		protected Object doInBackground(Object... arg) {
			this.webv = (WebView) arg[1];
			return couchdb.getDocument(arg[0] + "");
		}

		@Override
		protected void onPostExecute(Object result) {
			if(result != null) {
				try {
					JSONObject json = (JSONObject)result;
					webv.loadData(json.getString("html"), "text/html", "UTF-8");
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		}

		@Override
		protected void onPreExecute() {
		}

		@Override
		protected void onProgressUpdate(Void... values) {

		}
	}
	private class MyHTTPD extends NanoHTTPD {
	    public MyHTTPD() throws IOException {
	      super(PORT, null);
	    }
	 
	    @Override
	    public Response serve(String uri, String method, Properties header, Properties parms, Properties files) {
	      final StringBuilder buf = new StringBuilder();
	      for (Entry<Object, Object> kv : header.entrySet())
	        buf.append(kv.getKey() + " : " + kv.getValue() + "\n");
	      handler.post(new Runnable() {
	        @Override
	        public void run() {
	        	Log.i("server", buf.toString());
	          //hello.setText(buf);
	        }
	      });
	 
	      final String html = "<html><head><head><body><h1>Hello, World</h1></body></html>";
	      return new NanoHTTPD.Response(HTTP_OK, MIME_HTML, html);
	    }
	  }
}
